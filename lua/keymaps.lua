_G.map = vim.keymap.set
map("n", "<Esc>", "<cmd>noh<CR>")
map("n", "<C-h>", "<C-w>h")
map("n", "<C-j>", "<C-w>j")
map("n", "<C-k>", "<C-w>k")
map("n", "<C-l>", "<C-w>l")
map("n", "<A-x>", "<C-x>")
map("n", "<A-a>", "<C-a>")
map("n", "<S-t", "<cmd>enew<CR>")
map("n", "<C-t>b", "<cmd>tabnew<CR>")
map("n", "<A-Tab>", "<cmd>BufferNext<CR>")
map("n", "<S-Tab>", "<cmd>BufferPrevious<CR>")
map("n", "<leader>zz", "<cmd>TZAtaraxis<CR>")
map("n", "<leader>zf", "<cmd>TZFocus<CR>")
map("n", "<leader>zm", "<cmd>TZMinimalist<CR>")
map("n", "<leader>ra", ":%s//g<Left><Left><C-r><C-w>/", {desc = "Replace pattern"})
map("n", "<leader>da", "ggVGd")
map("n", "<C-a>", "GVgg")
map("n", "gx", "<cmd>silent !xdg-open <cfile><CR>")
map("n", "n", "nzzzv")
map("n", "N", "Nzzzv")
map("n", "J", "mzJ`z")
map("n", "k", "(v:count > 5 ? (\"m'\" . v:count1) : \"\") . (v:count || mode(1)[0:1] == \"no\" ? \"\" : \"g\") . \"k\"",
  {expr = true})
map("n", "j", "(v:count > 5 ? (\"m'\" .v:count1) : \"\") . (v:count || mode(1)[0:1] == \"no\" ? \"\" : \"g\") . \"j\"",
  {expr = true})
map("n", "<leader>k", ":m .-2<CR>==")
map("n", "<leader>j", ":m .+1<CR>==")
map("v", "K", ":m '<-2<CR>gv=gv")
map("v", "J", ":m '>+1<CR>gv=gv")
map("i", "<C-k>", "<Esc>:m .-2<CR>==")
map("i", "<C-j>", "<Esc>:m .+1<CR>==")
map("i", ",", ",<C-g>u")
map("i", ".", ".<C-g>u")
map("i", "!", "!<C-g>u")
map("i", "?", "?<C-g>u")
map("v", ">", ">gv")
map("v", "<", "<gv")
map({"n","t"}, "<C-A-n>", "<cmd>execute 'Lazy! load nnn.nvim' | NnnExplorer %:p:h<CR>")
map({"n","t"}, "<C-A-p>", "<cmd>execute 'Lazy! load nnn.nvim' | NnnPicker %:p:h<CR>")
map("n", "<leader>ff", "<cmd>Telescope fd<CR>")
map("n", "<leader>fgf", "<cmd>Telescope git_files<CR>")
map("n", "<leader>fh", "<cmd>Telescope help_tags<CR>")
map("n", "<leader>fgb", "<cmd>Telescope git_branches<CR>")
map("n", "<leader>fgc", "<cmd>Telescope git_commits<CR>")
map("n", "<leader>xt", "<cmd>TroubleToggle<CR>")
map("n", "<leader>xw", "<cmd>TroubleToggle workspace_diagnostics<CR>")
map("n", "<leader>xd", "<cmd>TroubleToggle document_diagnostics<CR>")
map("n", "<leader>xq", "<cmd>TroubleToggle quickfix<CR>")
map("n", "<leader>xl", "<cmd>TroubleToggle loclist<CR>")
map("n", "<leader>xg", "<cmd>lua vimgrepprompt()<CR>")
map("n", "<C-A-j>", function()
  require("trouble").open()
  require("trouble").next({skip_groups = true, jump = true})
end, {desc = "Trouble next item"})
map("n", "<C-A-k>", function()
  require("trouble").open()
  require("trouble").previous({skip_groups = true, jump = true})
end, {desc = "Trouble previous item"})
map("n", "<leader>gc", function() require("neogit").open({cwd = f.expand("%:h")}) end, {desc = "Neogit open"})
map("n", "<F5>", function() require("dap").continue() end, {desc = "DAP continue()"})
map("n", "<F6>", function() require("dapui").toggle() end, {desc = "DAPUI Toggle"})
map("n", "<F10>", function() require("dap").step_over() end, {desc = "DAP Step Over"})
map("n", "<F11>", function() require("dap").step_into() end, {desc = "DAP Step Into"})
map("n", "<F12>", function() require("dap").step_out() end, {desc = "DAP Step Out"})
map("n", "<leader>b", function() require("dap").toggle_breakpoint() end, {desc = "DAP Toggle Breakpoint"})
map("n", "<leader>B", function() require("dap").set_breakpoint(f.input("Breakpoint condition: ")) end,
  {desc = "DAP Set Conditional Breakpoint"})
map("n", "<leader>lp", function() require("dap").set_breakpoint(nil, nil, f.input("Log point message: ")) end,
  {desc = "DAP Set Log Point"})
map("n", "<leader>dr", function() require("dap").repl.open() end, {desc = "DAP Open REPL"})
map("n", "<leader>sf", function() c.source(f.expand("%:p")) end, {desc = "Source file"})
